#!groovy

library "SharedLib@${env.BRANCH_NAME}"

pipeline {
    agent {
        label 'linux'
    }
    parameters {
        string(name: 'RELEASE_VERSION', defaultValue: '9.0.0', description: '')
        string(name: 'POST_RELEASE_SNAPSHOT_VERSION', defaultValue: '9.0.1-SNAPSHOT', description: '')
        booleanParam(name: 'BUILD_CORE', defaultValue: true, description: '')
        booleanParam(name: 'RELEASE', defaultValue: false, description: '')
    }
    options {
        timestamps()
        skipDefaultCheckout()
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    stages {
        stage('Prepare') {
            steps {
                cleanupWorkspaceAndCloneRepo()
                sh "git checkout ${env.BRANCH_NAME}"
                purge()
            }
        }
        stage('Build lightning-core') {
            when {
                expression {
                    "${params.BUILD_CORE}".toBoolean()
                }
            }
            steps {
                buildCore()
            }
        }
        stage('Set release version number') {
            steps {
                sh "./mvnw -pl lightning-aws-lambda versions:set -DnewVersion=${params.RELEASE_VERSION}"
                sh "git add -A; git commit -m 'Lightning AWS Lambda release version bump'"
            }
        }
        stage('Build and unit test') {
            steps {
                sh './mvnw -pl lightning-aws-lambda clean verify'
            }
            post {
                always {
                    junit 'lightning-aws-lambda/target/*-reports/junitreports/*.xml'
                    jacoco execPattern: '**/lightning-aws-lambda/target/jacoco*.exec', classPattern: '**/lightning-aws-lambda/target/classes', sourcePattern: '**/lightning-aws-lambda/src/main/java'
                }
            }
        }
        stage('Deploy to AWS') {
            steps {
                dir('lightning-aws-lambda') {
                    sh 'aws s3 cp target/lightning-aws-lambda.jar s3://automatictester.co.uk-lightning-aws-lambda-jar/lightning-aws-lambda.jar --region eu-west-2'
                }
                dir('lightning-aws-lambda/tf') {
                    sh 'terraform init -no-color'
                    sh 'terraform apply -no-color -auto-approve'
                }
            }
        }
        stage('Test end-to-end') {
            steps {
                dir('lightning-aws-lambda') {
                    sh 'aws s3 sync src/test/resources s3://automatictester.co.uk-lightning-aws-lambda --delete --region eu-west-2'
                    sh './src/test/scripts/console/output/verify_1_1_1.sh'
                }
            }
        }
        stage('Volume testing') {
            steps {
                dir('lightning-aws-lambda/large-volume-data-generator') {
                    sh './generate-100mb-csv.sh'
                }
                dir('lightning-aws-lambda/tf') {
                    sh 'terraform apply -no-color -auto-approve -var-file="volume-test.tfvars"'
                }
                dir('lightning-aws-lambda') {
                    sh 'aws s3 cp large-volume-data-generator/jmeter-results.csv s3://automatictester.co.uk-lightning-aws-lambda/csv/jmeter/100mb.csv --region eu-west-2'
                    sh './src/test/scripts/volume/volume.sh'
                }
                dir('lightning-aws-lambda/tf') {
                    sh 'terraform apply -no-color -auto-approve'
                }
            }
        }
        stage('Tag release') {
            steps {
                sh "git tag lambda-${params.RELEASE_VERSION}"
            }
        }
        stage('Archive JAR') {
            steps {
                dir('lightning-aws-lambda') {
                    archiveArtifacts artifacts: 'target/lightning-aws-lambda.jar'
                }
            }
        }
        stage('Set snapshot version number') {
            steps {
                sh "./mvnw -pl lightning-aws-lambda versions:set -DnewVersion=${params.POST_RELEASE_SNAPSHOT_VERSION}"
                sh "git add -A; git commit -m 'Lightning AWS Lambda post-release version bump'"
            }
        }
        stage('Push release to origin') {
            when {
                expression {
                    "${params.RELEASE}".toBoolean() && "${env.BRANCH_NAME}" == "master"
                }
            }
            steps {
                push()
            }
        }
    }
}
